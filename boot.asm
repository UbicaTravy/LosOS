bits 16
org 0x7C00

; загрузчк - загружает ядро ОС, хотя которая сама является ОС, ну лан

; сама суть загрузчика описана в документации

start:
    cli
    xor ax, ax ; Да! оказвается если xor-нуть число само на себя то будет 0, и это быстрее чем mov ax, 0
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov sp, 0x7C00 ; чтобы стек не улетел на Гаити (здесь мы указываем адресс стека)
    sti

    ; очистка экрана
    mov ax, 0x0003
    int 0x10

    ; сброс диска
    mov ah, 0x00
    mov dl, 0x80
    int 0x13
    jc disk_error

    ; загрузка ядра (24 сектора). Если пишет boot error - поставили слишком много секторов, если disk read error - слишком мало
    ; именно здесь, автор чувстовал невыносимую тяжесть бытия лоу левел разработчика
    mov ah, 0x02
    mov al, 24 ;  кол-во секторов
    mov ch, 0
    mov cl, 2
    mov dh, 0
    mov dl, 0x80
    mov bx, 0x8000
    int 0x13
    jc disk_error

    ; переход к ядру
    jmp 0x0000:0x8000

disk_error:
    mov si, error_msg
    call print
    jmp $

; загрузить из lib io.asm низя в загрузчике. Во первых вдруг io.asm повреждён или его нету вообще. Во вторых это нифиг не надо, и не умничай тут, умник блин нашёлся.
print:
    lodsb 
    test al, al
    jz .done
    mov ah, 0x0E
    int 0x10
    jmp print
.done:
    ret

; данные
error_msg db "Disk read error!", 0

times 510-($-$$) db 0 ; заполняем оставшееся пространство NULL-ями до 510 байт (2 байта уходят на магическое число)
dw 0xAA55 ; магическое число чтобы показать что загрузчик закончился